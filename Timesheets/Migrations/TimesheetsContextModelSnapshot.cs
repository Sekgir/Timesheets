// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Timesheets;

namespace Timesheets.Migrations
{
    [DbContext(typeof(TimesheetsContext))]
    partial class TimesheetsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Timesheets.DAL.Models.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdCustomer")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdPerson")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdPerson")
                        .HasColumnType("bigint");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<long>("IdContract")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdContract");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.InvoiceTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdInvoice")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTask")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdInvoice");

                    b.HasIndex("IdTask")
                        .IsUnique();

                    b.ToTable("InvoiceTask");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.InvoiceTaskEmpl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdInvoice")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTaskEmployee")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdInvoice");

                    b.HasIndex("IdTaskEmployee")
                        .IsUnique();

                    b.ToTable("InvoiceTaskEmpl");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("FixedAmount")
                        .HasColumnType("boolean");

                    b.Property<long>("IdContract")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdContract");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.TaskEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdEmployee")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTask")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdTask");

                    b.ToTable("TaskEmployee");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Contract", b =>
                {
                    b.HasOne("Timesheets.DAL.Models.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Customer", b =>
                {
                    b.HasOne("Timesheets.DAL.Models.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("Timesheets.DAL.Models.Customer", "IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Employee", b =>
                {
                    b.HasOne("Timesheets.DAL.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("Timesheets.DAL.Models.Employee", "IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Invoice", b =>
                {
                    b.HasOne("Timesheets.DAL.Models.Contract", "Contract")
                        .WithMany("Invoices")
                        .HasForeignKey("IdContract")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.InvoiceTask", b =>
                {
                    b.HasOne("Timesheets.DAL.Models.Invoice", "Invoice")
                        .WithMany("InvoiceTasks")
                        .HasForeignKey("IdInvoice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timesheets.DAL.Models.Task", "Task")
                        .WithOne("InvoiceTask")
                        .HasForeignKey("Timesheets.DAL.Models.InvoiceTask", "IdTask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.InvoiceTaskEmpl", b =>
                {
                    b.HasOne("Timesheets.DAL.Models.Invoice", "Invoice")
                        .WithMany("InvoiceTaskEmpls")
                        .HasForeignKey("IdInvoice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timesheets.DAL.Models.TaskEmployee", "TaskEmployee")
                        .WithOne("InvoiceTaskEmpl")
                        .HasForeignKey("Timesheets.DAL.Models.InvoiceTaskEmpl", "IdTaskEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("TaskEmployee");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Task", b =>
                {
                    b.HasOne("Timesheets.DAL.Models.Contract", "Contract")
                        .WithMany("Tasks")
                        .HasForeignKey("IdContract")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.TaskEmployee", b =>
                {
                    b.HasOne("Timesheets.DAL.Models.Employee", "Employee")
                        .WithMany("TaskEmployees")
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timesheets.DAL.Models.Task", "Task")
                        .WithMany("TaskEmployees")
                        .HasForeignKey("IdTask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Contract", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Employee", b =>
                {
                    b.Navigation("TaskEmployees");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceTaskEmpls");

                    b.Navigation("InvoiceTasks");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Person", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.Task", b =>
                {
                    b.Navigation("InvoiceTask");

                    b.Navigation("TaskEmployees");
                });

            modelBuilder.Entity("Timesheets.DAL.Models.TaskEmployee", b =>
                {
                    b.Navigation("InvoiceTaskEmpl");
                });
#pragma warning restore 612, 618
        }
    }
}
